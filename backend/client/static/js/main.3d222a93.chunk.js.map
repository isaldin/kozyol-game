{"version":3,"sources":["router/routerPaths.ts","ui-elements/input.ts","ui-elements/button.tsx","ui-elements/form.tsx","helpers/apiUrl.ts","services/auth.service.ts","router/router.ts","components/authorization/authorization.tsx","store/actions/games.ts","store/selectors/games.ts","store/states/games.ts","store/states/gameState.ts","store/actions/gameState.ts","store/reducers/index.ts","store/reducers/games.ts","store/reducers/gameState.ts","store/index.ts","services/games.service.ts","components/gamesList/gamesList.tsx","ui-elements/select.ts","components/gameCreation/gameCreation.tsx","components/mainPage/mainPage.tsx","model/Card.ts","helpers/cardImage.ts","components/gamePage/elements.tsx","components/gamePage/cardsOnTable.tsx","services/step.service.ts","model/GameState.ts","helpers/gameStateHelpers.ts","services/gameState.service.ts","components/gamePage/confirmButton.tsx","components/gamePage/myCards.tsx","helpers/stepHelpers.ts","components/gamePage/playersList.tsx","components/gamePage/setResults.tsx","components/gamePage/gamePage.tsx","store/selectors/gameState.ts","router/routes.tsx","index.tsx"],"names":["mainRoute","gameRoute","gameId","arguments","length","undefined","concat","Input","styled","input","_templateObject","Button","button","button_templateObject","FormContainer","div","form_templateObject","Box","_templateObject2","_ref","align","css","_templateObject3","Title","h3","_templateObject4","Label","label","_templateObject5","FormLink","Link","_templateObject6","apiUrl","path","authService","AuthService","Object","classCallCheck","this","createClass","key","value","token","localStorage","setItem","getItem","headers","Authorization","getToken","login","password","_this","axios","post","username","then","res","setToken","data","access_token","history","createBrowserHistory","router","connectRouter","GamesActionTypes","_Component","_getPrototypeOf2","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","formDisabled","signIn","_this$state","alert","setState","objectSpread","props","isRegistration","signUp","catch","error","replace","onChangeLogin","event","target","onChangePassword","inherits","removeItem","react_default","a","createElement","AuthFormContainer","name","onChange","type","onClick","to","Component","authorization_templateObject","getGameIdMatch","createMatchSelector","getGameIdByLocation","createSelector","match","params","defaultGamesState","games","GameStateActionTypes","defaultGameStateState","reducers","combineReducers","action","FETCH_ALL_SUCCESS","payload","gameState","UPDATE","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","routerMiddleware","gamesService","GamesService","slotsCount","withAuth","get","getList","dispatch","gameFetchAllSuccess","GamesListComponent","timer","_this2","updateList","setInterval","clearInterval","push","toString","_this3","GameListContainer","map","id","owner","players","GameListItem","openGame","GameAuthor","GameSlots","GamesList","connect","li","gamesList_templateObject","span","gamesList_templateObject2","gamesList_templateObject3","ul","gamesList_templateObject4","Select","select","select_templateObject","GameCreation","createGame","onSlotsCountChange","parseInt","Suit","MainPage","MainPageTitle","MainPageContainer","gameCreation_GameCreation","mainPage_templateObject","h1","mainPage_templateObject2","Rank","suitSymbols","suitIsRed","_suitIsRed","defineProperty","Hearts","Diamonds","Clubs","Spades","SuitCharMap","_SuitCharMap","ValueCharMap","_ValueCharMap","Six","Seven","Eight","Nine","Jack","Queen","King","Ten","Ace","cardImage","_ref2","slicedToArray","suit","GamePageTitle","elements_templateObject","Container","elements_templateObject2","CardsList","elements_templateObject3","CardSlot","elements_templateObject4","MyCardSlot","elements_templateObject5","selected","elements_templateObject6","CardItem","img","_templateObject7","ToMain","_templateObject8","PlayersWaiting","_templateObject9","CardsOnTable","slots","cards","first","keys","_loop","i","forEach","item","SuitSymbol","isRed","trump","slot","card","src","cardsOnTable_templateObject","cardsOnTable_templateObject2","GameStateEnum","stepService","StepService","GameStateHelpers","WAIT_PLAYERS","WAIT_CONFIRMATIONS_FOR_START_NEW_ROUND","WAIT_CONFIRMATIONS_FOR_START_NEW_SET","includes","PLAY","ENDED","me","currentPlayerId","isWaitingConfirmations","gameStateService","GameStateService","getState","isNaN","getGameState","timeout","ConfirmButton","current","disabled","newCurrent","confirm","MyCards","selectedCards","nextProps","nextState","nextContext","JSON","stringify","isFirstStep","cardsOnTable","firstStepCards","firstStep","isSelectedCard","filter","enabled","every","canCardBeSelected","toConsumableArray","find","doStep","fetch","selectCard","waitingConfirmations","confirmButton_ConfirmButton","PlayersList","PlayersListContainer","PlayersListItem","isMe","myTurn","PlayerAvatar","PlayerName","ScoreContainer","PlayerScore","score","playersList_templateObject","playersList_templateObject2","p","playersList_templateObject3","playersList_templateObject4","playersList_templateObject5","playersList_templateObject6","playersList_templateObject7","_ref3","playersList_templateObject8","_ref4","playersList_templateObject9","SetResults","ResultsList","player","ResultsListItem","tricks","setResults_templateObject","setResults_templateObject2","GamePageComponent","connectToGame","playersList_PlayersList","gameScore","isEnded","EndBanner","isWaitingPlayers","slotsState","isPlaying","isSetEnded","cardsOnTable_CardsOnTable","setResults_SetResults","myCards","myCards_MyCards","isMyTurn","GamePage","h2","gamePage_templateObject","Routes","react_router","exact","component","render","authorization_Authorization","rootElement","document","getElementById","ReactDOM","es","esm","routes_Routes"],"mappings":"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","file":"static/js/main.3d222a93.chunk.js","sourcesContent":["export const mainRoute = '/';\nexport const authorizationRoute = '/authorization';\nexport const registrationRoute = '/registration';\nexport const gameRoute = (gameId: string = ':gameId') => `/game/${gameId}`;\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n    width: 100%;\n    max-width: 100%;\n    min-width: 100%;\n    min-height: 40px;\n    max-height: 100px;\n    border: 1px solid #999;\n    padding: 5px;\n    border-radius: 4px;\n    box-sizing: border-box;\n    font-size: 14px;\n`;","import styled from 'styled-components';\n\nexport const Button = styled.button`\n    height: 40px;\n    padding: 0 15px;\n    color: #fff;\n    font-size: 15px;\n    background: rgba(26, 90, 188, 0.83);\n    border: none;\n    border-radius: 3px;\n    cursor: pointer;\n`;","import styled, { css } from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const FormContainer = styled.div`\n    display: block;\n    background: #f3f3f3;\n    border: 1px solid #e1e1e1;\n    padding: 20px;\n`;\n\nexport const Box = styled.div<{ align?: string }>`\n    margin-bottom: 15px;\n\n    :last-child {\n        margin-bottom: 0;\n    }\n\n    ${({ align }) => align === 'center' && css`\n        text-align: center;\n    `}\n`;\n\nexport const Title = styled.h3`\n    margin: 0;\n`;\n\nexport const Label = styled.label`\n    display: block;\n    font-size: 14px;\n    margin-bottom: 4px;\n`;\n\nexport const FormLink = styled(Link)`\n  margin-left: 15px;\n`;\n","const isProd = false\nconst prodHost = 'http://ddf9a402.ngrok.io'\nexport const apiUrl = (path: string) => `/api${path}`\n","import axios from 'axios';\nimport { apiUrl } from 'helpers/apiUrl';\n\nexport class AuthService {\n  setToken(token: string) {\n    localStorage.setItem('auth', token)\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('auth')\n  }\n\n  withAuth() {\n    return { headers: { Authorization: `Bearer ${this.getToken()}` } }\n  }\n\n  signIn(login: string, password: string): Promise<void> {\n    return axios.post(apiUrl('/auth/login'), { username: login, password })\n      .then(res => {\n        this.setToken(res.data.access_token)\n      })\n  }\n\n  signUp(login: string, password: string): Promise<void> {\n    return axios.post(apiUrl('/auth/signup'), { username: login, password })\n      .then(() => void 0)\n  }\n}\n\nexport const authService = new AuthService()\n","import { connectRouter } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();\nexport const router = connectRouter(history);","import React, { ChangeEvent, Component } from 'react';\nimport { Input } from 'ui-elements/input';\nimport { Button } from 'ui-elements/button';\nimport { Box, FormContainer, FormLink, Label, Title } from 'ui-elements/form';\nimport { authorizationRoute, mainRoute, registrationRoute } from 'router/routerPaths';\nimport { authService } from 'services/auth.service';\nimport { history } from 'router/router';\nimport styled from 'styled-components';\n\ninterface AuthorizationState {\n  login: string;\n  password: string;\n  formDisabled: boolean;\n}\n\ninterface AuthorizationProps {\n  isRegistration: boolean;\n}\n\nexport class Authorization extends Component<AuthorizationProps, AuthorizationState> {\n  state: AuthorizationState = { login: '', password: '', formDisabled: false };\n\n  componentDidMount() {\n    localStorage.removeItem('auth')\n  }\n\n  signIn = () => {\n    const { login, password, formDisabled } = this.state;\n\n    if (formDisabled) return;\n    if (login.length < 3 || login.length > 12) {\n      alert('Логин должен быть от 3 до 12 символов')\n      return\n    }\n\n    this.setState({ ...this.state, ...{ formDisabled: true } });\n\n    (this.props.isRegistration\n      ? authService.signUp(login, password)\n      : authService.signIn(login, password))\n      .catch(error => {\n        alert(error);\n        this.setState({ login: '', password: '', formDisabled: false });\n      })\n      .then(() => {\n        history.replace(mainRoute)\n      });\n  }\n\n  onChangeLogin = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ ...this.state, ...{ login: event.target.value } })\n  }\n\n  onChangePassword = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ ...this.state, ...{ password: event.target.value } })\n  }\n\n  render(): React.ReactElement {\n    return (\n      <AuthFormContainer>\n        <Box>\n          <Title>{this.props.isRegistration ? 'Регистрация' : 'Авторизация'}</Title>\n        </Box>\n        <Box>\n          <Label>Логин:</Label>\n          <Input name=\"login\"\n                 value={this.state.login}\n                 onChange={this.onChangeLogin}/>\n        </Box>\n        <Box>\n          <Label>Пароль:</Label>\n          <Input name=\"password\"\n                 type=\"password\"\n                 value={this.state.password}\n                 onChange={this.onChangePassword}/>\n        </Box>\n        <Box align=\"center\">\n          <Button onClick={this.signIn}>\n            {this.props.isRegistration ? 'Зарегистрироваться' : 'Войти'}\n          </Button>\n          <FormLink to={this.props.isRegistration ? authorizationRoute : registrationRoute}>\n            {this.props.isRegistration ? 'Авторизация' : 'Регистрация'}\n          </FormLink>\n        </Box>\n      </AuthFormContainer>\n    )\n  }\n}\n\nexport const AuthFormContainer = styled(FormContainer)`\n    width: 500px;\n    margin: 0 auto;\n`;\n","import { Action } from 'model/Action';\nimport { GameItem } from 'model/GameItem';\n\nexport enum GamesActionTypes {\n  FETCH_ALL_SUCCESS = 'FETCH_ALL_SUCCESS'\n}\n\nexport type GameFetchAllSuccessAction = Action<GamesActionTypes.FETCH_ALL_SUCCESS, GameItem[]>;\n\nexport function gameFetchAllSuccess(games: GameItem[]): GameFetchAllSuccessAction {\n  return {\n    type: GamesActionTypes.FETCH_ALL_SUCCESS,\n    payload: games\n  };\n}\n","import { IState } from '../states';\nimport { createMatchSelector } from 'connected-react-router';\nimport { gameRoute } from 'router/routerPaths';\nimport { createSelector } from 'reselect';\nimport { GameItem } from 'model/GameItem';\n\nexport const getGamesList = ({ games }: IState): GameItem[] => games.games;\n\nexport const getGameIdMatch = createMatchSelector<IState, { gameId: string }>(\n  gameRoute()\n);\n\nexport const getGameIdByLocation = createSelector(getGameIdMatch, match => {\n  if (!match) {\n    return '';\n  }\n\n  return match.params['gameId'];\n});\n","import { GameItem } from 'model/GameItem';\n\nexport interface GamesState {\n  games: GameItem[]\n}\n\nexport const defaultGamesState: GamesState = { games: [] }\n","import { GameStateHelpers } from 'helpers/gameStateHelpers';\n\nexport const defaultGameStateState: GameStateHelpers | null = null;\n","import { Action } from 'model/Action';\nimport { GameStateHelpers } from 'helpers/gameStateHelpers';\n\nexport enum GameStateActionTypes {\n  UPDATE = 'UPDATE'\n}\n\nexport type GameStateUpdateAction = Action<GameStateActionTypes.UPDATE, GameStateHelpers>;\n\nexport function gameStateUpdate(gameState: GameStateHelpers): GameStateUpdateAction {\n  return {\n    type: GameStateActionTypes.UPDATE,\n    payload: gameState\n  };\n}\n","import { combineReducers } from 'redux';\nimport { router } from 'router/router';\nimport { gamesReducer } from 'store/reducers/games';\nimport { gameStateReducer } from 'store/reducers/gameState';\n\nexport const reducers = combineReducers({\n  router,\n  games: gamesReducer,\n  gameState: gameStateReducer\n});\n","import { defaultGamesState, GamesState } from 'store/states/games';\nimport { GamesActionTypes } from 'store/actions/games';\nimport { Action } from 'model/Action';\n\nexport function gamesReducer(state = defaultGamesState, action: Action<GamesActionTypes>): GamesState {\n  switch (action.type) {\n    case GamesActionTypes.FETCH_ALL_SUCCESS: {\n      return { games: action.payload };\n    }\n\n    default:\n      return state;\n  }\n}\n","import { Action } from 'model/Action';\nimport { defaultGameStateState } from 'store/states/gameState';\nimport { GameStateActionTypes } from 'store/actions/gameState';\nimport { GameStateHelpers } from 'helpers/gameStateHelpers';\n\nexport function gameStateReducer(\n  state = defaultGameStateState,\n  action: Action<GameStateActionTypes>\n): GameStateHelpers | null {\n  switch (action.type) {\n    case GameStateActionTypes.UPDATE: {\n      return action.payload;\n    }\n\n    default:\n      return state;\n  }\n}\n","import { routerMiddleware } from 'connected-react-router';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { reducers } from './reducers';\nimport { history } from 'router/router';\n\n// @ts-ignore\nconst devToolsEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n\nconst composeEnhancers = devToolsEnhancers || compose;\n\nexport const store = createStore(\n  reducers,\n  composeEnhancers(\n    applyMiddleware(\n      routerMiddleware(history)\n    )\n  )\n);\n","import axios from 'axios';\nimport { authService } from 'services/auth.service';\nimport { GameItem } from 'model/GameItem';\nimport { store } from 'store';\nimport { gameFetchAllSuccess } from 'store/actions/games';\nimport { apiUrl } from 'helpers/apiUrl';\n\nexport class GamesService {\n  createGame(slotsCount: number): Promise<any> {\n    return axios\n      .post(apiUrl('/games/create'), { slotsCount }, { ...authService.withAuth() })\n  }\n\n  getList(): Promise<GameItem[]> {\n    return axios\n      .get<GameItem[]>(apiUrl('/games/list'), { ...authService.withAuth() })\n      .then(({ data }) => data)\n  }\n\n  connectToGame(gameId: number): Promise<any> {\n    return axios\n      .post(apiUrl('/games/connect'), { gameId }, { ...authService.withAuth() })\n      .then(res => res.data)\n  }\n\n  updateList(): Promise<void> {\n    return this.getList().then(games => {\n      store.dispatch(gameFetchAllSuccess(games))\n    })\n  }\n}\n\nexport const gamesService = new GamesService()\n","import React, { Component } from \"react\";\nimport { GameItem } from \"model/GameItem\";\nimport { history } from \"router/router\";\nimport { authorizationRoute, gameRoute } from \"router/routerPaths\";\nimport { Box, FormContainer, Title } from 'ui-elements/form';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { getGamesList } from 'store/selectors/games';\nimport { gamesService } from 'services/games.service';\n\nexport interface GamesListProps {\n  games: GameItem[];\n}\n\nexport interface GamesListState {\n  timer: number | null;\n}\n\nexport class GamesListComponent extends Component<GamesListProps, GamesListState> {\n  state: GamesListState = { timer: null };\n\n  componentDidMount() {\n    gamesService.updateList()\n      .catch(() => {\n        history.replace(authorizationRoute)\n      })\n      .then(() => {\n        const timer = window.setInterval(() => {\n          gamesService.updateList()\n        }, 3000)\n\n        this.setState({ timer })\n      })\n  }\n\n  componentWillUnmount() {\n    if (this.state && this.state.timer !== null) window.clearInterval(this.state.timer)\n  }\n\n  openGame(gameId: number) {\n    history.push(gameRoute(gameId.toString()))\n  }\n\n  render(): React.ReactElement {\n    return (\n      <FormContainer>\n        <Box>\n          <Title>Список игр</Title>\n        </Box>\n        <GameListContainer>\n          {this.props.games.length === 0 && 'Игор нет'}\n          {this.props.games.map(({ id, owner, slotsCount, players }) => (\n            <GameListItem key={id} onClick={() => this.openGame(id)}>\n              <GameAuthor>{owner.login}:</GameAuthor>\n              <GameSlots>{players.length}/{slotsCount}</GameSlots>\n            </GameListItem>\n          ))}\n        </GameListContainer>\n      </FormContainer>\n    );\n  }\n}\n\nexport const GamesList = connect(\n  createSelector(getGamesList, games => ({ games })),\n  () => ({})\n)(GamesListComponent);\n\nexport const GameListItem = styled.li`\n    margin-bottom: 10px;\n    padding: 10px;\n    border: 1px solid #e1e1e1;\n    color: #000;\n    display: block;\n    text-decoration: none;\n    background: #fff;\n    cursor: pointer;\n`;\n\nexport const GameAuthor = styled.span`\n    margin-bottom: 5px;\n    margin-right: 5px;\n    font-size: 16px;\n    font-weight: bold;\n`;\n\nexport const GameSlots = styled.span`\n    font-size: 14px;\n`;\n\nexport const GameListContainer = styled.ul`\n    margin: 0;\n    padding: 0;\n    max-height: 400px;\n    overflow-y: scroll;\n`;\n","import styled from 'styled-components';\n\nexport const Select = styled.select`\n    width: 100%;\n    max-width: 100%;\n    min-width: 100%;\n    min-height: 40px;\n    max-height: 100px;\n    border: 1px solid #999;\n    padding: 5px;\n    border-radius: 4px;\n    box-sizing: border-box;\n    font-size: 14px;\n`;\n","import React, { ChangeEvent, Component } from 'react';\nimport { Button } from 'ui-elements/button';\nimport { Box, FormContainer, Label, Title } from 'ui-elements/form';\nimport { Select } from 'ui-elements/select';\nimport { gamesService } from 'services/games.service';\n\ninterface GameCreationState {\n  slotsCount: number;\n  formDisabled: boolean;\n}\n\nexport class GameCreation extends Component<any, GameCreationState> {\n  state: GameCreationState = { slotsCount: 2, formDisabled: false };\n\n  createGame = () => {\n    gamesService.createGame(this.state.slotsCount)\n      .catch(alert)\n      .then(() => {\n        gamesService.updateList()\n      })\n  }\n\n  onSlotsCountChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    this.setState({ ...this.state, ...{ slotsCount: parseInt(event.target.value) } })\n  }\n\n  render(): React.ReactElement {\n    return (\n      <FormContainer>\n        <Box>\n          <Title>Создать игру</Title>\n        </Box>\n        <Box>\n          <Label>Кол-во игроков:</Label>\n          <Select name=\"slotsCount\"\n                  value={this.state.slotsCount}\n                  onChange={this.onSlotsCountChange}>\n            <option>2</option>\n            <option>3</option>\n            <option>4</option>\n          </Select>\n        </Box>\n\n        <Box align=\"center\">\n          <Button onClick={this.createGame}>Создать</Button>\n        </Box>\n      </FormContainer>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { GamesList } from 'components/gamesList/gamesList';\nimport { GameCreation } from 'components/gameCreation/gameCreation';\nimport styled from 'styled-components';\n\nexport class MainPage extends Component<any, any> {\n  render(): React.ReactElement {\n    return (\n      <div>\n        <MainPageTitle>KOZYOL GAME</MainPageTitle>\n        <MainPageContainer>\n          <GamesList/>\n          <GameCreation/>\n        </MainPageContainer>\n      </div>\n    );\n  }\n}\n\nconst MainPageContainer = styled.div`\n  display: grid;\n  grid-template-columns: 50% 50%;\n  padding: 0 5%;\n`;\n\nconst MainPageTitle = styled.h1`\n  text-align: center;\n  color: rgba(26,90,188,0.83);\n`;\n","//S-spades,H-hearts,D-diamonds,C-clubs\n\nexport enum Suit {\n  Hearts = 0, // – червы ♥\n  Diamonds, // – бубны ♦\n  Clubs, // – трефы ♣\n  Spades, // – пики точеные ♠\n}\n\nexport const suitSymbols = [\"♥\", \"♦\", \"♣\", \"♠\"];\n\nexport const suitIsRed: {[key: number]: boolean} = {\n  [Suit.Hearts]: true,\n  [Suit.Diamonds]: true,\n  [Suit.Clubs]: false,\n  [Suit.Spades]: false\n};\n\nexport const SuitCharMap = {\n  [Suit.Hearts]: \"H\",\n  [Suit.Diamonds]: \"D\",\n  [Suit.Clubs]: \"C\",\n  [Suit.Spades]: \"S\",\n};\n\nexport enum Rank {\n  Six = 6,\n  Seven = 7,\n  Eight = 8,\n  Nine = 9,\n  Jack = 102, // – валет\n  Queen = 103, // – дама\n  King = 104, // – король\n  Ten = 110,\n  Ace = 111, // – туз\n}\n\nexport const ValueCharMap = {\n  [Rank.Six]: \"6\",\n  [Rank.Seven]: \"7\",\n  [Rank.Eight]: \"8\",\n  [Rank.Nine]: \"9\",\n  [Rank.Jack]: \"J\",\n  [Rank.Queen]: \"Q\",\n  [Rank.King]: \"K\",\n  [Rank.Ten]: \"10\",\n  [Rank.Ace]: \"A\",\n};\n\nexport type Card = [Suit, Rank];\nexport type Cards = Card[];\nexport type Deck = Cards;\nexport type Hand = Cards;\nexport type Trick = Cards;\nexport type Desk = Array<{ [player: number]: Cards }>;\n","import { Card, SuitCharMap, ValueCharMap } from 'model/Card';\n\nexport function cardImage([suit, value]: Card) {\n  return `http://richardschneider.github.io/cardsJS/cards/${ValueCharMap[value]}${SuitCharMap[suit]}.svg`\n}\n","import styled, { css } from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { Title } from 'ui-elements/form';\n\nexport const GamePageTitle = styled.h1`\n  text-align: center;\n  color: rgba(26,90,188,0.83);\n`;\n\nexport const Container = styled.div`\n  text-align: center;\n`;\n\nexport const CardsList = styled.ul`\n  text-align: center;\n  margin: 0;\n  padding: 0;\n`;\n\nexport const CardSlot = styled.li`\n  text-align: center;\n  display: inline-block;\n  border: 1px solid #000;\n  padding: 10px;\n  width: 120px;\n  height: 150px;\n  margin: 10px;\n  background: #f3f3f3;\n  overflow: hidden;\n  position: relative;\n`;\n\nexport const MyCardSlot = styled(CardSlot)<{selected?: boolean}>`\n  cursor: pointer;\n  border-radius: 10px;\n  background: #e4e4e4;\n\n  ${({selected}) => selected && css`\n    background: rgba(26, 90, 188, 0.83);\n  `}\n\n  :hover {\n    background: rgba(26, 90, 188, 0.83);\n  }\n`;\n\nexport const CardItem = styled.img`\n  width: 90px;\n  position: absolute;\n  left: 10px;\n  top: 10px;\n  \n  :nth-child(2) {\n    left: 20px;\n    top: 20px;\n  }\n  \n  :nth-child(3) {\n    left: 30px;\n    top: 30px;\n  }\n  \n  :nth-child(4) {\n    left: 40px;\n    top: 40px;\n  }\n  \n  :nth-child(5) {\n    left: 50px;\n    top: 50px;\n  }\n`;\n\nexport const ToMain = styled(Link)`\n    display: inline-block;\n    background-color: rgba(26, 90, 188, 0.83);\n    color: #fff;\n    padding: 5px 10px;\n    font-size: 16px;\n    text-decoration: none;\n    border-radius: 3px;\n    vertical-align: top;\n    margin-top: 4px;\n    margin-right: 10px;\n`;\n\nexport const PlayersWaiting = styled(Title)`\n    text-align: center;\n    padding: 10px;\n    border: 1px solid #444;\n    margin-bottom: 15px;\n`;\n","import React, { Component } from 'react';\nimport { Title } from 'ui-elements/form';\nimport { cardImage } from 'helpers/cardImage';\nimport { Cards, Desk, suitIsRed, suitSymbols } from 'model/Card';\nimport { CardItem, CardsList, CardSlot, Container } from './elements';\nimport styled, { css } from 'styled-components';\n\nexport interface CardsOnTableProps {\n  cards: Desk\n  trump: number\n}\n\nexport class CardsOnTable extends Component<CardsOnTableProps, any> {\n  render(): React.ReactElement {\n    const slots: Cards[] = [[], [], [], []]\n\n    if (this.props.cards.length > 0) {\n      const first = this.props.cards[0]\n      const firstUserId = parseInt(Object.keys(first)[0])\n      const firstCards = first[firstUserId]\n      const slotsCount = firstCards.length\n\n      for (let i = 0; i < slotsCount; i++) {\n        this.props.cards.forEach(item => {\n          const userId = parseInt(Object.keys(item)[0])\n          const cards = item[userId]\n\n          slots[i] = slots[i] || []\n\n          if (cards[i]) {\n            slots[i].push(cards[i])\n          }\n        })\n      }\n    }\n\n    return (\n      <Container>\n        <Title>Карты на столе (козырь:\n          <SuitSymbol isRed={suitIsRed[this.props.trump]}>{suitSymbols[this.props.trump]}</SuitSymbol>\n          )</Title>\n        <CardsList>\n          {slots.map((slot, i) => <CardSlot key={i}>{slot.map(card =>\n            <CardItem key={card.toString()} src={cardImage(card)}/>\n          )}</CardSlot>)}\n        </CardsList>\n      </Container>\n    )\n  }\n}\n\nexport const SuitSymbol = styled.span<{isRed?: boolean}>`\n  font-size: 24px;\n  line-height: 18px;\n  font-weight: bold;\n  margin: 0 5px;\n  display: inline-block;\n  border: 1px solid #4e4e4e;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  padding: 5px;\n\n  ${({isRed}) => isRed && css`\n    color: red;\n  `}\n`;\n","import axios from \"axios\";\nimport { GameState } from \"model/GameState\";\nimport { authService } from \"services/auth.service\";\nimport { Cards } from \"model/Card\";\nimport { apiUrl } from \"helpers/apiUrl\";\n\nexport class StepService {\n  doStep(gameId: number, cards: Cards): Promise<any> {\n    return axios\n      .post<GameState>(\n        apiUrl(`/step/${gameId}`),\n        { cards },\n        { ...authService.withAuth() }\n      )\n      .then((res) => res.data);\n  }\n\n  confirm(gameId: number) {\n    // TODO: change to /games/:id/confirm\n    return axios\n      .post<GameState>(\n        apiUrl(`/step/${gameId}`),\n        {},\n        { ...authService.withAuth() }\n      )\n      .then((res) => res.data);\n  }\n}\n\nexport const stepService = new StepService();\n","import { Cards, Desk } from \"./Card\";\nimport { Player } from \"model/Player\";\n\nexport enum GameStateEnum {\n  WAIT_PLAYERS = \"WAIT_PLAYERS\",\n  WAIT_CONFIRMATIONS_FOR_START_NEW_ROUND = \"WAIT_CONFIRMATIONS_FOR_START_NEW_ROUND\",\n  WAIT_CONFIRMATIONS_FOR_START_NEW_SET = \"WAIT_CONFIRMATIONS_FOR_START_NEW_SET\",\n  PLAY = \"PLAY\",\n  ENDED = \"ENDED\",\n}\n\nexport type GameState = {\n  id: number;\n  me: number;\n  owner: Player;\n  slotsCount: number;\n  state: GameStateEnum;\n  trump: number;\n  currentPlayerId?: number;\n  // stepEndTime: string;\n  myScore: number;\n  gameScore: {\n    [playerId: number]: number;\n  };\n  tricks?: {\n    [playerId: number]: number;\n  };\n  cardsOnTable: Desk;\n  players: Player[];\n  myCards: Cards;\n};\n","import { GameState, GameStateEnum } from \"model/GameState\";\n\nexport class GameStateHelpers {\n  constructor(public readonly gameState: GameState) {}\n\n  get isWaitingPlayers(): boolean {\n    return this.gameState.state === GameStateEnum.WAIT_PLAYERS;\n  }\n\n  get isWaitingConfirmations(): boolean {\n    return [\n      GameStateEnum.WAIT_CONFIRMATIONS_FOR_START_NEW_ROUND,\n      GameStateEnum.WAIT_CONFIRMATIONS_FOR_START_NEW_SET,\n    ].includes(this.gameState.state);\n  }\n\n  get isSetEnded(): boolean {\n    return this.gameState.state === GameStateEnum.WAIT_CONFIRMATIONS_FOR_START_NEW_SET\n  }\n\n  get isPlaying(): boolean {\n    return [\n      GameStateEnum.PLAY,\n      GameStateEnum.WAIT_CONFIRMATIONS_FOR_START_NEW_ROUND,\n      GameStateEnum.WAIT_CONFIRMATIONS_FOR_START_NEW_SET,\n    ].includes(this.gameState.state);\n  }\n\n  get isEnded(): boolean {\n    return this.gameState.state === GameStateEnum.ENDED;\n  }\n\n  get isMyTurn(): boolean {\n    return (\n      this.gameState.me === this.gameState.currentPlayerId &&\n      !this.isWaitingConfirmations\n    );\n  }\n\n  get slotsState(): string {\n    return `${this.gameState.players.length}/${this.gameState.slotsCount}`;\n  }\n}\n","import axios from 'axios';\nimport { GameState } from 'model/GameState';\nimport { authService } from 'services/auth.service';\nimport { getGameIdByLocation } from 'store/selectors/games';\nimport { store } from 'store';\nimport { IState } from 'store/states';\nimport { gameStateUpdate } from 'store/actions/gameState';\nimport { GameStateHelpers } from 'helpers/gameStateHelpers';\nimport { apiUrl } from 'helpers/apiUrl';\n\nexport class GameStateService {\n  getGameState(gameId: number): Promise<GameState> {\n    return axios.get<GameState>(apiUrl(`/gameState/${gameId}`), {...authService.withAuth()})\n      .then(res => res.data)\n  }\n\n  fetch() {\n    const gameId = parseInt(getGameIdByLocation(store.getState() as IState))\n\n    if (!gameId || isNaN(gameId)) {\n      return\n    }\n\n    this.getGameState(gameId).then(state => {\n      store.dispatch(gameStateUpdate(new GameStateHelpers(state)))\n    })\n  }\n}\n\nexport const gameStateService = new GameStateService()\n","import React, { Component } from 'react';\nimport { Button } from 'ui-elements/button';\n\nexport interface ConfirmButtonProps {\n  confirm: () => void\n}\n\nexport interface ConfirmButtonState {\n  timer: number | null\n  current: number\n  disabled: boolean\n}\n\nconst timeout = 10000\n\nexport class ConfirmButton extends Component<ConfirmButtonProps, any> {\n  state: ConfirmButtonState = {timer: null, current: timeout, disabled: false}\n\n  componentDidMount() {\n    const timer = window.setInterval(() => {\n      const newCurrent = this.state.current - 1000\n\n      this.setState({...this.state, current: newCurrent}, () => {\n        if (newCurrent <= 0) {\n          if (this.state.timer) window.clearInterval(this.state.timer)\n          this.setState({timer: null, current: 0, disabled: true}, () => {\n            this.props.confirm()\n          })\n        }\n      })\n    }, 1000)\n\n    if (this.state.timer) window.clearInterval(this.state.timer)\n\n    this.setState({timer})\n  }\n\n  componentWillUnmount() {\n    if (this.state.timer) window.clearInterval(this.state.timer)\n  }\n\n  render(): React.ReactElement {\n    return (\n      this.state.disabled ? <span/> :\n      <Button onClick={() => this.props.confirm()}>\n        ЭЭЭЭ, давай дальше, сайпал ({this.state.current / 1000})\n      </Button>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport { Title } from \"ui-elements/form\";\nimport { cardImage } from \"helpers/cardImage\";\nimport { Card, Cards, Desk } from \"model/Card\";\nimport { CardItem, CardsList, Container, MyCardSlot } from \"./elements\";\nimport { canCardBeSelected } from \"helpers/stepHelpers\";\nimport { Button } from \"ui-elements/button\";\nimport { stepService } from \"services/step.service\";\nimport { gameStateService } from \"services/gameState.service\";\nimport { ConfirmButton } from 'components/gamePage/confirmButton';\n\nexport interface MyCardsProps {\n  cards: Cards;\n  gameId: number;\n  enabled: boolean;\n  cardsOnTable: Desk;\n  waitingConfirmations: boolean;\n}\n\nexport interface MyCardsState {\n  selectedCards: Cards;\n}\n\nexport class MyCards extends Component<MyCardsProps, MyCardsState> {\n  state: MyCardsState = { selectedCards: [] };\n\n  shouldComponentUpdate(\n    nextProps: Readonly<MyCardsProps>,\n    nextState: Readonly<MyCardsState>,\n    nextContext: any\n  ): boolean {\n    return (\n      JSON.stringify(nextState) !== JSON.stringify(this.state) ||\n      JSON.stringify(nextProps) !== JSON.stringify(this.props)\n    );\n  }\n\n  selectCard(card: Card) {\n    const isFirstStep = this.props.cardsOnTable.length === 0;\n    let firstStepCards = [];\n\n    if (!isFirstStep) {\n      const firstStep = this.props.cardsOnTable[0];\n      const firstUserId = parseInt(Object.keys(firstStep)[0]);\n      firstStepCards = firstStep[firstUserId];\n    }\n\n    if (this.isSelectedCard(card)) {\n      this.setState({\n        selectedCards: this.state.selectedCards.filter(\n          (item) => JSON.stringify(item) !== JSON.stringify(card)\n        ),\n      });\n\n      return;\n    }\n\n    if (\n      !this.props.enabled ||\n      (!isFirstStep &&\n        firstStepCards.length === this.state.selectedCards.length)\n    ) {\n      return;\n    }\n\n    if (isFirstStep && !canCardBeSelected(card, this.state.selectedCards)) {\n      return;\n    }\n\n    this.setState({ selectedCards: [...this.state.selectedCards, card] });\n  }\n\n  isSelectedCard(card: Card): boolean {\n    return !!this.state.selectedCards.find(\n      (item) => JSON.stringify(item) === JSON.stringify(card)\n    );\n  }\n\n  doStep() {\n    if (this.state.selectedCards.length === 0) {\n      return;\n    }\n\n    const cards = this.state.selectedCards;\n\n    this.setState({ selectedCards: [] });\n\n    stepService\n      .doStep(this.props.gameId, cards)\n      .catch(alert)\n      .then(() => {\n        gameStateService.fetch();\n      });\n  }\n\n  confirm() {\n    stepService\n      .confirm(this.props.gameId)\n      .catch(alert)\n      .then(() => {\n        gameStateService.fetch();\n      });\n  }\n\n  render(): React.ReactElement {\n    return (\n      <Container>\n        <Title>Мои карты:</Title>\n        <CardsList>\n          {this.props.cards.map((card) => (\n            <MyCardSlot\n              key={`${card}`}\n              selected={this.isSelectedCard(card)}\n              onClick={() => this.selectCard(card)}\n            >\n              <CardItem src={cardImage(card)} />\n            </MyCardSlot>\n          ))}\n        </CardsList>\n        {this.props.enabled && (\n          <Button onClick={() => this.doStep()}>\n            Ногам ходу, голове приходу\n          </Button>\n        )}\n        {this.props.waitingConfirmations && <ConfirmButton confirm={() => this.confirm()}/>}\n      </Container>\n    );\n  }\n}\n","import { Card, Cards } from 'model/Card';\n\nexport function canCardBeSelected(card: Card, selectedCards: Cards): boolean {\n  return selectedCards.every(item => item[0] === card[0] || item[1] === card[1])\n}\n","import React, { Component } from 'react';\nimport { Title } from 'ui-elements/form';\nimport { Container } from './elements';\nimport styled, { css } from 'styled-components';\nimport { Player } from 'model/Player';\n\nexport interface CardsOnTableProps {\n  players: Player[]\n  me: number\n  currentPlayerId?: number\n  score: {\n    [playerId: number]: number\n  }\n}\n\nexport class PlayersList extends Component<CardsOnTableProps, any> {\n  render(): React.ReactElement {\n    return (\n      <Container>\n        <Title>Игроки:</Title>\n        <PlayersListContainer>\n          {this.props.players\n            .map(({ id, name }) => <PlayersListItem\n              isMe={this.props.me === id}\n              current={this.props.currentPlayerId === id}\n              myTurn={this.props.currentPlayerId === id && this.props.me === id}\n              key={id}>\n            <PlayerAvatar src={'https://cdn.iconscout.com/icon/free/png-512/avatar-380-456332.png'}/>\n              <PlayerName>{name}</PlayerName>\n              <ScoreContainer><PlayerScore>{this.props.score[id]}</PlayerScore></ScoreContainer>\n          </PlayersListItem>)}\n        </PlayersListContainer>\n      </Container>\n    )\n  }\n}\n\nexport const PlayersListContainer = styled.ul`\n  text-align: center;\n`;\n\nexport const PlayerAvatar = styled.img`\n  width: 50px;\n  height: 50px;\n`;\n\nexport const PlayerName = styled.p`\n  text-align: center;\n  overflow: hidden;\n  margin: 0;\n`;\n\nexport const ScoreContainer = styled.p`\n  margin: 0;\n`;\n\nexport const PlayerScore = styled.div`\n  display: inline-block;\n  width: 25px;\n  padding: 5px 1px;\n  font-size: 13px;\n  border-radius: 50%;\n  background: rgba(255,193,35,0.83);\n  border: 2px solid #fff;\n  color: #000;\n  text-align: center;\n`;\n\nexport const PlayersListItem = styled.li<{isMe?: boolean, current?: boolean, myTurn?: boolean}>`\n  display: inline-block;\n  border: 1px solid #000;\n  padding: 10px;\n  width: 100px;\n  height: 100px;\n  margin: 10px;\n  \n  ${({isMe}) => isMe && css`\n    background: rgba(26, 90, 188, 0.83);\n    color: #fff;\n  `}\n\n  ${({current}) => current && css`\n    border: 3px solid rgba(255,193,35,0.83);\n  `}\n\n  ${({myTurn}) => myTurn && css`\n    background: #ff5320;\n  `}\n`;\n","import React, { Component } from 'react';\nimport { Title } from 'ui-elements/form';\nimport { cardImage } from 'helpers/cardImage';\nimport { Cards, Desk, suitSymbols } from 'model/Card';\nimport { CardItem, CardsList, CardSlot, Container } from './elements';\nimport { Player } from 'model/Player';\nimport styled from 'styled-components';\n\nexport interface SetResultsProps {\n  tricks: {\n    [playerId: number]: number\n  }\n  players: Player[]\n}\n\nexport class SetResults extends Component<SetResultsProps, any> {\n  render(): React.ReactElement {\n    return (\n      <Container>\n        <Title>Итоги круга:</Title>\n        <ResultsList>\n          {this.props.players.map(player => {\n            return <ResultsListItem><strong>{player.name}</strong>: {this.props.tricks[player.id]}</ResultsListItem>\n          })}\n        </ResultsList>\n      </Container>\n    )\n  }\n}\n\nexport const ResultsList = styled.ul`\n  border: 1px solid #000;\n  max-width: 500px;\n  margin: 20px auto;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const ResultsListItem = styled.li`\n  border-bottom: 1px solid #000;\n  padding: 10px;\n  \n  :last-child {\n    border-bottom: 0;\n  }\n`;\n","import React, { Component } from \"react\";\nimport { gamesService } from \"services/games.service\";\nimport { getGameIdByLocation } from \"store/selectors/games\";\nimport { connect } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport { history } from \"router/router\";\nimport { mainRoute } from \"router/routerPaths\";\nimport { CardsOnTable } from \"components/gamePage/cardsOnTable\";\nimport { MyCards } from \"components/gamePage/myCards\";\nimport {\n  GamePageTitle,\n  PlayersWaiting,\n  ToMain,\n} from \"components/gamePage/elements\";\nimport { PlayersList } from \"components/gamePage/playersList\";\nimport { gameStateService } from \"services/gameState.service\";\nimport { GameStateHelpers } from \"helpers/gameStateHelpers\";\nimport { getGameState } from \"store/selectors/gameState\";\nimport { SetResults } from 'components/gamePage/setResults';\nimport styled from 'styled-components';\n\nexport interface GamePageProps {\n  gameId: string;\n  gameState: GameStateHelpers | null;\n}\n\nexport interface GamePageState {\n  timer: number | null;\n}\n\nexport class GamePageComponent extends Component<GamePageProps, GamePageState> {\n  state: GamePageState = { timer: null };\n\n  componentDidMount() {\n    const gameId = parseInt(this.props.gameId);\n\n    gamesService\n      .connectToGame(gameId)\n      .catch((error) => {\n        alert(error);\n        history.replace(mainRoute);\n      })\n      .then(() => {\n        gameStateService.fetch();\n\n        const timer = window.setInterval(() => {\n          gameStateService.fetch();\n        }, 3000);\n\n        this.setState({ timer });\n      });\n  }\n\n  componentWillUnmount() {\n    if (this.state.timer !== null) window.clearInterval(this.state.timer);\n  }\n\n  render(): React.ReactElement {\n    const { gameState } = this.props;\n\n    return (\n      <div>\n        {gameState !== null && (\n          <div>\n            <GamePageTitle>\n              <ToMain to={mainRoute}>← назад</ToMain>\n              Game by: {gameState.gameState.owner.name}\n            </GamePageTitle>\n            <PlayersList\n              players={gameState.gameState.players}\n              me={gameState.gameState.me}\n              currentPlayerId={gameState.gameState.currentPlayerId}\n              score={gameState.gameState.gameScore}\n            />\n            {gameState.isEnded && <EndBanner>\n                <p>Игры кончились, готовь туза</p>\n                <ToMain to={mainRoute}>К списку игр</ToMain>\n            </EndBanner>}\n            {gameState.isWaitingPlayers && (\n              <PlayersWaiting>{`Ожидаем игроков: ${gameState.slotsState}`}</PlayersWaiting>\n            )}\n            {gameState.isPlaying && !gameState.isSetEnded && (\n              <CardsOnTable\n                trump={gameState.gameState.trump}\n                cards={gameState.gameState.cardsOnTable}\n              />\n            )}\n            {gameState.isSetEnded && !!gameState.gameState.tricks && <SetResults\n              players={gameState.gameState.players}\n              tricks={gameState.gameState.tricks}\n            />}\n            {(gameState.gameState.myCards.length > 0 ||\n              gameState.isWaitingConfirmations) && (\n              <MyCards\n                gameId={gameState.gameState.id}\n                enabled={gameState.isMyTurn}\n                waitingConfirmations={gameState.isWaitingConfirmations}\n                cardsOnTable={gameState.gameState.cardsOnTable}\n                cards={gameState.gameState.myCards}\n              />\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport const GamePage = connect(\n  createSelector(getGameState, getGameIdByLocation, (gameState, gameId) => ({\n    gameState,\n    gameId,\n  })),\n  () => ({})\n)(GamePageComponent);\n\nexport const EndBanner = styled.h2`\n  text-align: center;\n`;","import { IState } from 'store/states';\nimport { GameStateHelpers } from 'helpers/gameStateHelpers';\n\nexport const getGameState = ({ gameState }: IState): GameStateHelpers => gameState;\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { authorizationRoute, gameRoute, mainRoute, registrationRoute } from './routerPaths';\nimport { Authorization } from 'components/authorization/authorization';\nimport { MainPage } from 'components/mainPage/mainPage';\nimport { GamePage } from 'components/gamePage/gamePage';\n\nexport const Routes = (): JSX.Element => (\n  <Switch>\n    <Route exact path={mainRoute} component={MainPage}/>\n    <Route exact path={gameRoute()} component={GamePage}/>\n    <Route exact path={authorizationRoute} render={() => <Authorization isRegistration={false}/>}/>\n    <Route exact path={registrationRoute} render={() => <Authorization isRegistration={true}/>}/>\n  </Switch>\n);","import { ConnectedRouter } from 'connected-react-router';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Routes } from './router/routes';\nimport { store } from './store';\nimport { Provider } from 'react-redux';\nimport { history } from 'router/router';\nimport './index.css';\n\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <Routes/>\n    </ConnectedRouter>\n  </Provider>,\n  rootElement\n);"],"sourceRoot":""}